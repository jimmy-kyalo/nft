{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","chainId","alert","accounts","length","account","setupEventListener","connectWallet","CONTRACT_ADDRESS","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wkmEAAe,G,MAAA,IAA0B,0C,uBCMnCA,EAAiB,cACjBC,EAAY,8BAA0BD,GAyK7BE,EArKH,WAGV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAwB,uCAAG,oCAAAC,EAAA,2DACVC,OAAbC,EADuB,EACvBA,SADuB,uBAI7BC,QAAQC,IAAI,gCAJiB,0BAO7BD,QAAQC,IAAI,8BAA+BF,GAPd,uBAUXA,EAASG,QAAQ,CAAEC,OAAQ,gBAVhB,cAU3BC,EAV2B,OAW/BJ,QAAQC,IAAI,sBAAwBG,GAGb,cACnBA,GACFC,MAAM,sDAhBuB,UAkBNN,EAASG,QAAQ,CAAEC,OAAQ,iBAlBrB,QAoBL,KAFlBG,EAlBuB,QAoBhBC,QACHC,EAAUF,EAAS,GACzBN,QAAQC,IAAI,+BAAgCO,GAC5Cb,EAAkBa,GAIlBC,KAEAT,QAAQC,IAAI,+BA7Ba,4CAAH,qDAoCxBS,EAAa,uCAAG,gCAAAb,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBM,MAAM,iBALU,0CAYKN,EAASG,QAAQ,CAAEC,OAAQ,wBAZhC,OAYZG,EAZY,OAiBlBN,QAAQC,IAAI,YAAaK,EAAS,IAClCX,EAAkBW,EAAS,IAI3BG,IAtBkB,kDAwBlBT,QAAQC,IAAR,MAxBkB,0DAAH,qDA6BbQ,EAAkB,uCAAG,oCAAAZ,EAAA,sDACnBc,EAAmB,6CAEzB,IAAK,EACkBb,QAAbC,EADN,EACMA,WAIAa,EAAW,IAAIC,IAAOC,UAAUC,aAAahB,GAC7CiB,EAASJ,EAASK,YACE,IAAIJ,IAAOK,SAASP,EAAkBQ,EAAUC,IAAKJ,GAK7DK,GAAG,oBAAoB,SAACC,EAAMC,GAC9CvB,QAAQC,IAAIqB,EAAMC,EAAQC,YAC1BnB,MAAM,kMAAD,OAAmMM,EAAnM,YAAuNY,EAAQC,gBAGtOxB,QAAQC,IAAI,0BAGZD,QAAQC,IAAI,kCAEd,MAAOwB,GACPzB,QAAQC,IAAIwB,GA1BW,2CAAH,qDA8BlBC,EAAoB,uCAAG,sCAAA7B,EAAA,yDACF,6CADE,WAGFC,SAAbC,EAHe,EAGfA,UAHe,wBAMfa,EAAW,IAAIC,IAAOC,UAAUC,aAAahB,GAC7CiB,EAASJ,EAASK,YAClBU,EAAoB,IAAId,IAAOK,SAPlB,6CAO6CC,EAAUC,IAAKJ,GAE/EhB,QAAQC,IAAI,yCAVS,UAWF0B,EAAkBC,gBAXhB,eAWjBC,EAXiB,OAarB7B,QAAQC,IAAI,yBAbS,UAcf4B,EAAOC,OAdQ,QAgBrB9B,QAAQC,IAAR,kEAAuE4B,EAAOE,OAhBzD,wBAmBrB/B,QAAQC,IAAI,kCAnBS,0DAsBvBD,QAAQC,IAAR,MAtBuB,0DAAH,qDAiC1B,OAPA+B,qBAAU,WACRpC,MACC,IAMD,qBAAKqC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,+BACA,mBAAGA,UAAU,WAAb,mEAGoB,KAAnBvC,EACC,wBAAQwC,QAASxB,EAAeuB,UAAU,mCAA1C,+BAIA,wBAAQC,QAASR,EAAsBO,UAAU,mCAAjD,yBAKJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKE,IAAI,eAAeF,UAAU,eAAeG,IAAKC,IACtD,mBACEJ,UAAU,cACVK,KAAM/C,EACNgD,OAAO,SACPC,IAAI,aAJN,6BAKelD,cCpKzBmD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.55e912c8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json';\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n\n  \n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    \n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n    \n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n  \n    // String, hex code of the chainId of the Rinkebey test network\n    const rinkebyChainId = \"0x4\"; \n    if (chainId !== rinkebyChainId) {\n      alert(\"You are not connected to the Rinkeby Test Network!\");\n    }\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account)\n\n          // Setup listener! This is for the case where a user comes to our site\n          // and ALREADY had their wallet connected + authorized.\n          setupEventListener()\n      } else {\n          console.log(\"No authorized account found\")\n      }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    const CONTRACT_ADDRESS = \"0xF84a6a24C1879425EDFBBDB9e568241A35e55A2B\";\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0xF84a6a24C1879425EDFBBDB9e568241A35e55A2B\";\n      try {\n        const { ethereum } = window;\n  \n        if (ethereum) {\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n  \n          console.log(\"Going to pop wallet now to pay gas...\")\n          let nftTxn = await connectedContract.makeAnEpicNFT();\n  \n          console.log(\"Mining...please wait.\")\n          await nftTxn.wait();\n          \n          console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n  \n        } else {\n          console.log(\"Ethereum object doesn't exist!\");\n        }\n      } catch (error) {\n        console.log(error)\n      }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n  */\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n            <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n              Connect to Wallet\n            </button>\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n// https://testnets.opensea.io/assets/0xF84a6a24C1879425EDFBBDB9e568241A35e55A2B/1","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}